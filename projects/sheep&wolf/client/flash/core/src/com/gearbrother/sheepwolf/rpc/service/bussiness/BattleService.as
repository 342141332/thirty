package com.gearbrother.sheepwolf.rpc.service.bussiness {
	import com.gearbrother.sheepwolf.rpc.service.*;
	import com.gearbrother.sheepwolf.rpc.channel.RpcSocketChannel;

	/**
	 * Don't modify manually
	 *
	 * @generated by tool
	 * @create on 2014-05-26 15:10:38
	 */
	public class BattleService extends RpcService {
		public function BattleService(channel:RpcSocketChannel) {
			super(channel);
		}

		/**
		 * 停下
		 *
		 * @successCallback 成功回调
		 * @errorCallback 失败回调
		 */
		public function stop(successCallback:Function = null, errorCallback:Function = null):RpcServiceCall {
			return call("battleService.stop", [], successCallback, errorCallback);
		}

		/**
		 * 移动
		 *
		 * @direction 
		 * @successCallback 成功回调
		 * @errorCallback 失败回调
		 */
		public function move(direction:int, successCallback:Function = null, errorCallback:Function = null):RpcServiceCall {
			return call("battleService.move", [direction], successCallback, errorCallback);
		}

		/**
		 * 重新连接战场
		 *
		 * @successCallback 成功回调
		 * @errorCallback 失败回调
		 */
		public function reload(successCallback:Function = null, errorCallback:Function = null):RpcServiceCall {
			return call("battleService.reload", [], successCallback, errorCallback);
		}

		/**
		 * 碰撞
		 *
		 * @collisions 
		 * @successCallback 成功回调
		 * @errorCallback 失败回调
		 */
		public function touch(collisions:Array, successCallback:Function = null, errorCallback:Function = null):RpcServiceCall {
			return call("battleService.touch", [collisions], successCallback, errorCallback);
		}

		/**
		 * 按下
		 *
		 * @keyCode 
		 * @successCallback 成功回调
		 * @errorCallback 失败回调
		 */
		public function keyboardDown(keyCode:int, successCallback:Function = null, errorCallback:Function = null):RpcServiceCall {
			return call("battleService.keyboardDown", [keyCode], successCallback, errorCallback);
		}

		/**
		 * 放开
		 *
		 * @keyboardKey 
		 * @successCallback 成功回调
		 * @errorCallback 失败回调
		 */
		public function keyboardUp(keyboardKey:int, successCallback:Function = null, errorCallback:Function = null):RpcServiceCall {
			return call("battleService.keyboardUp", [keyboardKey], successCallback, errorCallback);
		}

		/**
		 * 血量改变
		 *
		 * @hp 
		 * @successCallback 成功回调
		 * @errorCallback 失败回调
		 */
		public function hpChange(hp:int, successCallback:Function = null, errorCallback:Function = null):RpcServiceCall {
			return call("battleService.hpChange", [hp], successCallback, errorCallback);
		}

		/**
		 * 使用道具在地图中
		 *
		 * @toolConfId 
		 * @x 
		 * @y 
		 * @direct 
		 * @successCallback 成功回调
		 * @errorCallback 失败回调
		 */
		public function toolUse(toolConfId:String, x:Number, y:Number, direct:int, successCallback:Function = null, errorCallback:Function = null):RpcServiceCall {
			return call("battleService.toolUse", [toolConfId, x, y, direct], successCallback, errorCallback);
		}

		/**
		 * 广播调用方法
		 *
		 * @method 
		 * @argusJson 
		 * @successCallback 成功回调
		 * @errorCallback 失败回调
		 */
		public function methodCall(method:String, argusJson:String, successCallback:Function = null, errorCallback:Function = null):RpcServiceCall {
			return call("battleService.methodCall", [method, argusJson], successCallback, errorCallback);
		}
	}
}
